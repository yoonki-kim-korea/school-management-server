const Log = require('../../utils/debug.js');

/**
 * 월별 수업료 합산
 */    
monthlySchoolfeeSumList = (req, res, connection) => { 
    
    let sql = ` 
    SELECT CTIME AS "ctime",
		   TORD AS "trod",
		   ORD AS "ord",
		   TP AS "tp",
		   TOTAL AS "total",
		   NA_CNT AS "naCnt",
		   TC_CNT AS "tcCnt",
		   MC_CNT AS "mcCnt",
		   SS_CNT AS "ssCnt",
		   FORMAT(FEE, 2, 'de_DE')  AS "fee",
           FORMAT(TOTAL_FEE, 2, 'de_DE') AS "totalFee"
        FROM (
                SELECT '오전' AS CTIME,
						0 AS TORD,
						0 AS ORD,
						A.REDUCTION_TYPE_NAME AS TP,
						SUM(COM) AS TOTAL,
						CAST(SUM(CASE WHEN A.REDUCTION_TYPE = 'NA' THEN 1 ELSE 0 END) AS UNSIGNED) AS NA_CNT,
						CAST(SUM(CASE WHEN A.REDUCTION_TYPE = 'TC' THEN 1 ELSE 0 END) AS UNSIGNED) AS TC_CNT,
						CAST(SUM(CASE WHEN A.REDUCTION_TYPE = 'MC' THEN 1 ELSE 0 END) AS UNSIGNED) AS MC_CNT,
						CAST(SUM(CASE WHEN A.REDUCTION_TYPE = 'SS' THEN 1 ELSE 0 END) AS UNSIGNED) AS SS_CNT,
						SUM(FEE * COM)     AS FEE,
						SUM(COM) * SUM(FEE * COM) AS TOTAL_FEE
                FROM (SELECT B.STUDENT_ID,
                             B.REDUCTION_TYPE,
                             A.SCHOOLFEE_TYPE,
                             C1.CODE_NAME AS REDUCTION_TYPE_NAME,
                             CASE WHEN A.SCHOOLFEE_TYPE = 'RE' AND B.REDUCTION_TYPE = 'NA' THEN REGULAR_SCHOOL_FEE
								  WHEN A.SCHOOLFEE_TYPE = 'RE' AND B.REDUCTION_TYPE != 'NA' THEN REGULAR_SCHOOL_FEE_DISCOUNT
								  WHEN A.SCHOOLFEE_TYPE = 'E1' AND B.REDUCTION_TYPE = 'NA' THEN EXTRA_SCHOOL_FEE1
								  WHEN A.SCHOOLFEE_TYPE = 'E1' AND B.REDUCTION_TYPE != 'NA' THEN EXTRA_SCHOOL_FEE1_DISCOUNT
								  WHEN A.SCHOOLFEE_TYPE = 'E2' AND B.REDUCTION_TYPE = 'NA' THEN EXTRA_SCHOOL_FEE2
								  WHEN A.SCHOOLFEE_TYPE = 'E2' AND B.REDUCTION_TYPE != 'NA' THEN EXTRA_SCHOOL_FEE2_DISCOUNT
								  ELSE 0
                             END AS FEE, 
                           
							 CASE WHEN B.ABANDON_REASON IS NULL AND
									 D.START_DATE = B.START_DATE AND
									 LAST_DAY(CAST(CONCAT(X.APPLY_YEAR,X.APPLY_MONTH,'01') AS DATE)) BETWEEN CAST(D.RECEIPT_START_DATE AS DATE) AND CAST(D.RECEIPT_END_DATE AS DATE)
									 THEN 1 
								  WHEN B.ABANDON_REASON IS NULL AND
									 D.START_DATE != B.START_DATE AND
									 LAST_DAY(CAST(CONCAT(X.APPLY_YEAR,X.APPLY_MONTH,'01') AS DATE)) BETWEEN CAST(B.START_DATE AS DATE) AND CAST(D.RECEIPT_END_DATE AS DATE)
									 THEN 1
								  WHEN B.ABANDON_REASON IS NOT NULL AND
									 D.START_DATE = B.START_DATE AND
									 LAST_DAY(CAST(CONCAT(X.APPLY_YEAR,X.APPLY_MONTH,'01') AS DATE)) BETWEEN CAST(D.RECEIPT_START_DATE AS DATE) AND CAST(B.END_DATE AS DATE)
									 THEN 1 
								  WHEN B.ABANDON_REASON IS NOT NULL AND
									 D.START_DATE != B.START_DATE AND
									 LAST_DAY(CAST(CONCAT(X.APPLY_YEAR,X.APPLY_MONTH,'01') AS DATE)) BETWEEN CAST(B.START_DATE AS DATE) AND CAST(B.END_DATE AS DATE)
									 THEN 1
								  ELSE 0
							  END AS COM

                FROM CLASS_INFO A
                LEFT OUTER JOIN CLASSINFO_STUDENTS B ON A.CLASS_ID = B.CLASS_ID
				LEFT OUTER JOIN SEMESTER D ON A.SEMESTER_ID = D.SEMESTER_ID
                LEFT OUTER JOIN SCHOOL_FEE X ON A.SEMESTER_ID = X.SEMESTER_ID AND X.APPLY_YEAR = '${req.query.applyYear}' AND X.APPLY_MONTH = '${req.query.applyMonth}'
                LEFT OUTER JOIN COMMON_CODE C1 ON C1.SUPER_CODE = 'REDUCTION_TYPE' AND C1.CODE = B.REDUCTION_TYPE
                WHERE A.USE_YN = 'Y' AND B.USE_YN = 'Y'
                AND A.CLASS_TIME = 'AM') A
                GROUP BY A.REDUCTION_TYPE, REDUCTION_TYPE_NAME

                UNION

                SELECT '오전' AS CTIME,
						0 AS TORD,
						1 AS ORD,
						'합계' AS TP,
						SUM(COM) AS TOTAL,
						CAST(SUM(CASE WHEN A.REDUCTION_TYPE = 'NA' THEN 1 ELSE 0 END) AS UNSIGNED) AS NA_CNT,
						CAST(SUM(CASE WHEN A.REDUCTION_TYPE = 'TC' THEN 1 ELSE 0 END) AS UNSIGNED) AS TC_CNT,
						CAST(SUM(CASE WHEN A.REDUCTION_TYPE = 'MC' THEN 1 ELSE 0 END) AS UNSIGNED) AS MC_CNT,
						CAST(SUM(CASE WHEN A.REDUCTION_TYPE = 'SS' THEN 1 ELSE 0 END) AS UNSIGNED) AS SS_CNT,
						SUM(FEE * COM) AS FEE,
						SUM(COM) * SUM(FEE * COM) AS TOTAL_FEE
                FROM (SELECT B.STUDENT_ID,
                             B.REDUCTION_TYPE,
                             A.SCHOOLFEE_TYPE,
                             CASE WHEN A.SCHOOLFEE_TYPE = 'RE' AND B.REDUCTION_TYPE = 'NA' THEN REGULAR_SCHOOL_FEE
								  WHEN A.SCHOOLFEE_TYPE = 'RE' AND B.REDUCTION_TYPE != 'NA' THEN REGULAR_SCHOOL_FEE_DISCOUNT
								  WHEN A.SCHOOLFEE_TYPE = 'E1' AND B.REDUCTION_TYPE = 'NA' THEN EXTRA_SCHOOL_FEE1
								  WHEN A.SCHOOLFEE_TYPE = 'E1' AND B.REDUCTION_TYPE != 'NA' THEN EXTRA_SCHOOL_FEE1_DISCOUNT
								  WHEN A.SCHOOLFEE_TYPE = 'E2' AND B.REDUCTION_TYPE = 'NA' THEN EXTRA_SCHOOL_FEE2
								  WHEN A.SCHOOLFEE_TYPE = 'E2' AND B.REDUCTION_TYPE != 'NA' THEN EXTRA_SCHOOL_FEE2_DISCOUNT
								  ELSE 0
                             END AS FEE, 
                           
							 CASE WHEN B.ABANDON_REASON IS NULL AND
									 D.START_DATE = B.START_DATE AND
									 LAST_DAY(CAST(CONCAT(X.APPLY_YEAR,X.APPLY_MONTH,'01') AS DATE)) BETWEEN CAST(D.RECEIPT_START_DATE AS DATE) AND CAST(D.RECEIPT_END_DATE AS DATE)
									 THEN 1 
								  WHEN B.ABANDON_REASON IS NULL AND
									 D.START_DATE != B.START_DATE AND
									 LAST_DAY(CAST(CONCAT(X.APPLY_YEAR,X.APPLY_MONTH,'01') AS DATE)) BETWEEN CAST(B.START_DATE AS DATE) AND CAST(D.RECEIPT_END_DATE AS DATE)
									 THEN 1
								  WHEN B.ABANDON_REASON IS NOT NULL AND
									 D.START_DATE = B.START_DATE AND
									 LAST_DAY(CAST(CONCAT(X.APPLY_YEAR,X.APPLY_MONTH,'01') AS DATE)) BETWEEN CAST(D.RECEIPT_START_DATE AS DATE) AND CAST(B.END_DATE AS DATE)
									 THEN 1 
								  WHEN B.ABANDON_REASON IS NOT NULL AND
									 D.START_DATE != B.START_DATE AND
									 LAST_DAY(CAST(CONCAT(X.APPLY_YEAR,X.APPLY_MONTH,'01') AS DATE)) BETWEEN CAST(B.START_DATE AS DATE) AND CAST(B.END_DATE AS DATE)
									 THEN 1
								  ELSE 0
							  END AS COM

                FROM CLASS_INFO A
                LEFT OUTER JOIN CLASSINFO_STUDENTS B ON A.CLASS_ID = B.CLASS_ID
				LEFT OUTER JOIN SEMESTER D ON A.SEMESTER_ID = D.SEMESTER_ID
                LEFT OUTER JOIN SCHOOL_FEE X ON A.SEMESTER_ID = X.SEMESTER_ID AND X.APPLY_YEAR = '${req.query.applyYear}' AND X.APPLY_MONTH = '${req.query.applyMonth}'
                WHERE A.USE_YN = 'Y' AND B.USE_YN = 'Y'
                AND A.CLASS_TIME = 'AM') A

                UNION

                SELECT '오후' AS CTIME,
						1 AS TORD,
						0 AS ORD,
						A.REDUCTION_TYPE_NAME AS TP,
						SUM(COM) AS TOTAL,
						CAST(SUM(CASE WHEN A.REDUCTION_TYPE = 'NA' THEN 1 ELSE 0 END) AS UNSIGNED) AS NA_CNT,
						CAST(SUM(CASE WHEN A.REDUCTION_TYPE = 'TC' THEN 1 ELSE 0 END) AS UNSIGNED) AS TC_CNT,
						CAST(SUM(CASE WHEN A.REDUCTION_TYPE = 'MC' THEN 1 ELSE 0 END) AS UNSIGNED) AS MC_CNT,
						CAST(SUM(CASE WHEN A.REDUCTION_TYPE = 'SS' THEN 1 ELSE 0 END) AS UNSIGNED) AS SS_CNT,
						SUM(FEE * COM)     AS FEE,
						SUM(COM) * SUM(FEE * COM) AS TOTAL_FEE
                FROM (SELECT B.STUDENT_ID,
							 B.REDUCTION_TYPE,
							 A.SCHOOLFEE_TYPE,
							 C1.CODE_NAME AS REDUCTION_TYPE_NAME,
							 CASE WHEN A.SCHOOLFEE_TYPE = 'RE' AND B.REDUCTION_TYPE = 'NA' THEN REGULAR_SCHOOL_FEE
								  WHEN A.SCHOOLFEE_TYPE = 'RE' AND B.REDUCTION_TYPE != 'NA' THEN REGULAR_SCHOOL_FEE_DISCOUNT
								  WHEN A.SCHOOLFEE_TYPE = 'E1' AND B.REDUCTION_TYPE = 'NA' THEN EXTRA_SCHOOL_FEE1
								  WHEN A.SCHOOLFEE_TYPE = 'E1' AND B.REDUCTION_TYPE != 'NA' THEN EXTRA_SCHOOL_FEE1_DISCOUNT
								  WHEN A.SCHOOLFEE_TYPE = 'E2' AND B.REDUCTION_TYPE = 'NA' THEN EXTRA_SCHOOL_FEE2
								  WHEN A.SCHOOLFEE_TYPE = 'E2' AND B.REDUCTION_TYPE != 'NA' THEN EXTRA_SCHOOL_FEE2_DISCOUNT
								  ELSE 0
							 END AS FEE, 
                           
							 CASE WHEN B.ABANDON_REASON IS NULL AND
									 D.START_DATE = B.START_DATE AND
									 LAST_DAY(CAST(CONCAT(X.APPLY_YEAR,X.APPLY_MONTH,'01') AS DATE)) BETWEEN CAST(D.RECEIPT_START_DATE AS DATE) AND CAST(D.RECEIPT_END_DATE AS DATE)
									 THEN 1 
								  WHEN B.ABANDON_REASON IS NULL AND
									 D.START_DATE != B.START_DATE AND
									 LAST_DAY(CAST(CONCAT(X.APPLY_YEAR,X.APPLY_MONTH,'01') AS DATE)) BETWEEN CAST(B.START_DATE AS DATE) AND CAST(D.RECEIPT_END_DATE AS DATE)
									 THEN 1
								  WHEN B.ABANDON_REASON IS NOT NULL AND
									 D.START_DATE = B.START_DATE AND
									 LAST_DAY(CAST(CONCAT(X.APPLY_YEAR,X.APPLY_MONTH,'01') AS DATE)) BETWEEN CAST(D.RECEIPT_START_DATE AS DATE) AND CAST(B.END_DATE AS DATE)
									 THEN 1 
								  WHEN B.ABANDON_REASON IS NOT NULL AND
									 D.START_DATE != B.START_DATE AND
									 LAST_DAY(CAST(CONCAT(X.APPLY_YEAR,X.APPLY_MONTH,'01') AS DATE)) BETWEEN CAST(B.START_DATE AS DATE) AND CAST(B.END_DATE AS DATE)
									 THEN 1
								  ELSE 0
							  END AS COM

                FROM CLASS_INFO A
                LEFT OUTER JOIN CLASSINFO_STUDENTS B ON A.CLASS_ID = B.CLASS_ID
				LEFT OUTER JOIN SEMESTER D ON A.SEMESTER_ID = D.SEMESTER_ID
                LEFT OUTER JOIN SCHOOL_FEE X ON A.SEMESTER_ID = X.SEMESTER_ID AND X.APPLY_YEAR = '${req.query.applyYear}' AND X.APPLY_MONTH = '${req.query.applyMonth}'
                LEFT OUTER JOIN COMMON_CODE C1 ON C1.SUPER_CODE = 'REDUCTION_TYPE' AND C1.CODE = B.REDUCTION_TYPE
                WHERE A.USE_YN = 'Y' AND B.USE_YN = 'Y'
                AND A.CLASS_TIME = 'PM') A
                GROUP BY A.REDUCTION_TYPE, REDUCTION_TYPE_NAME

                UNION

                SELECT '오후' AS CTIME,
                       1 AS TORD,
                       1 AS ORD,
                       '합계' AS TP,
                       SUM(COM) AS TOTAL,
                       CAST(SUM(CASE WHEN A.REDUCTION_TYPE = 'NA' THEN 1 ELSE 0 END) AS UNSIGNED) AS NA_CNT,
                       CAST(SUM(CASE WHEN A.REDUCTION_TYPE = 'TC' THEN 1 ELSE 0 END) AS UNSIGNED) AS TC_CNT,
                       CAST(SUM(CASE WHEN A.REDUCTION_TYPE = 'MC' THEN 1 ELSE 0 END) AS UNSIGNED) AS MC_CNT,
                       CAST(SUM(CASE WHEN A.REDUCTION_TYPE = 'SS' THEN 1 ELSE 0 END) AS UNSIGNED) AS SS_CNT,
                       SUM(FEE * COM) AS FEE,
                       SUM(COM) * SUM(FEE * COM) AS TOTAL_FEE
                FROM (SELECT B.STUDENT_ID,
                             B.REDUCTION_TYPE,
                             A.SCHOOLFEE_TYPE,
                             CASE WHEN A.SCHOOLFEE_TYPE = 'RE' AND B.REDUCTION_TYPE = 'NA' THEN REGULAR_SCHOOL_FEE
								  WHEN A.SCHOOLFEE_TYPE = 'RE' AND B.REDUCTION_TYPE != 'NA' THEN REGULAR_SCHOOL_FEE_DISCOUNT
								  WHEN A.SCHOOLFEE_TYPE = 'E1' AND B.REDUCTION_TYPE = 'NA' THEN EXTRA_SCHOOL_FEE1
								  WHEN A.SCHOOLFEE_TYPE = 'E1' AND B.REDUCTION_TYPE != 'NA' THEN EXTRA_SCHOOL_FEE1_DISCOUNT
								  WHEN A.SCHOOLFEE_TYPE = 'E2' AND B.REDUCTION_TYPE = 'NA' THEN EXTRA_SCHOOL_FEE2
								  WHEN A.SCHOOLFEE_TYPE = 'E2' AND B.REDUCTION_TYPE != 'NA' THEN EXTRA_SCHOOL_FEE2_DISCOUNT
								  ELSE 0
                            END AS FEE, 
                           
							CASE WHEN B.ABANDON_REASON IS NULL AND
									D.START_DATE = B.START_DATE AND
									LAST_DAY(CAST(CONCAT(X.APPLY_YEAR,X.APPLY_MONTH,'01') AS DATE)) BETWEEN CAST(D.RECEIPT_START_DATE AS DATE) AND CAST(D.RECEIPT_END_DATE AS DATE)
									THEN 1 
								 WHEN B.ABANDON_REASON IS NULL AND
									D.START_DATE != B.START_DATE AND
									LAST_DAY(CAST(CONCAT(X.APPLY_YEAR,X.APPLY_MONTH,'01') AS DATE)) BETWEEN CAST(B.START_DATE AS DATE) AND CAST(D.RECEIPT_END_DATE AS DATE)
									THEN 1
								 WHEN B.ABANDON_REASON IS NOT NULL AND
									D.START_DATE = B.START_DATE AND
									LAST_DAY(CAST(CONCAT(X.APPLY_YEAR,X.APPLY_MONTH,'01') AS DATE)) BETWEEN CAST(D.RECEIPT_START_DATE AS DATE) AND CAST(B.END_DATE AS DATE)
									THEN 1 
								 WHEN B.ABANDON_REASON IS NOT NULL AND
									D.START_DATE != B.START_DATE AND
									LAST_DAY(CAST(CONCAT(X.APPLY_YEAR,X.APPLY_MONTH,'01') AS DATE)) BETWEEN CAST(B.START_DATE AS DATE) AND CAST(B.END_DATE AS DATE)
									THEN 1
								 ELSE 0
							 END AS COM

                FROM CLASS_INFO A
                LEFT OUTER JOIN CLASSINFO_STUDENTS B ON A.CLASS_ID = B.CLASS_ID
				LEFT OUTER JOIN SEMESTER D ON A.SEMESTER_ID = D.SEMESTER_ID
                LEFT OUTER JOIN SCHOOL_FEE X ON A.SEMESTER_ID = X.SEMESTER_ID AND X.APPLY_YEAR = '${req.query.applyYear}' AND X.APPLY_MONTH = '${req.query.applyMonth}'
                WHERE A.USE_YN = 'Y' AND B.USE_YN = 'Y'
                AND A.CLASS_TIME = 'PM') A

                UNION

                SELECT '수업료 총액' AS CTIME,
                       2 AS TORD,
                       1 AS ORD,
                       '수업료 총액' AS TP,
                       SUM(COM) AS TOTAL,
                       '' AS NA_CNT,
                       '' AS TC_CNT,
                       '' AS MC_CNT,
                       '' AS SS_CNT,
                       SUM(FEE * COM) AS FEE,
                       SUM(COM) * SUM(FEE * COM) AS TOTAL_FEE
                FROM (SELECT B.STUDENT_ID,
                             B.REDUCTION_TYPE,
                             A.SCHOOLFEE_TYPE,
                             CASE WHEN A.SCHOOLFEE_TYPE = 'RE' AND B.REDUCTION_TYPE = 'NA' THEN REGULAR_SCHOOL_FEE
								  WHEN A.SCHOOLFEE_TYPE = 'RE' AND B.REDUCTION_TYPE != 'NA' THEN REGULAR_SCHOOL_FEE_DISCOUNT
								  WHEN A.SCHOOLFEE_TYPE = 'E1' AND B.REDUCTION_TYPE = 'NA' THEN EXTRA_SCHOOL_FEE1
								  WHEN A.SCHOOLFEE_TYPE = 'E1' AND B.REDUCTION_TYPE != 'NA' THEN EXTRA_SCHOOL_FEE1_DISCOUNT
								  WHEN A.SCHOOLFEE_TYPE = 'E2' AND B.REDUCTION_TYPE = 'NA' THEN EXTRA_SCHOOL_FEE2
								  WHEN A.SCHOOLFEE_TYPE = 'E2' AND B.REDUCTION_TYPE != 'NA' THEN EXTRA_SCHOOL_FEE2_DISCOUNT
								  ELSE 0
                             END AS FEE, 
                           
							 CASE WHEN B.ABANDON_REASON IS NULL AND
									 D.START_DATE = B.START_DATE AND
									 LAST_DAY(CAST(CONCAT(X.APPLY_YEAR,X.APPLY_MONTH,'01') AS DATE)) BETWEEN CAST(D.RECEIPT_START_DATE AS DATE) AND CAST(D.RECEIPT_END_DATE AS DATE)
									 THEN 1 
								  WHEN B.ABANDON_REASON IS NULL AND
									 D.START_DATE != B.START_DATE AND
									 LAST_DAY(CAST(CONCAT(X.APPLY_YEAR,X.APPLY_MONTH,'01') AS DATE)) BETWEEN CAST(B.START_DATE AS DATE) AND CAST(D.RECEIPT_END_DATE AS DATE)
									 THEN 1
								  WHEN B.ABANDON_REASON IS NOT NULL AND
									 D.START_DATE = B.START_DATE AND
									 LAST_DAY(CAST(CONCAT(X.APPLY_YEAR,X.APPLY_MONTH,'01') AS DATE)) BETWEEN CAST(D.RECEIPT_START_DATE AS DATE) AND CAST(B.END_DATE AS DATE)
									 THEN 1 
								  WHEN B.ABANDON_REASON IS NOT NULL AND
									 D.START_DATE != B.START_DATE AND
									 LAST_DAY(CAST(CONCAT(X.APPLY_YEAR,X.APPLY_MONTH,'01') AS DATE)) BETWEEN CAST(B.START_DATE AS DATE) AND CAST(B.END_DATE AS DATE)
									 THEN 1
								  ELSE 0
							  END AS COM

                FROM CLASS_INFO A
                LEFT OUTER JOIN CLASSINFO_STUDENTS B ON A.CLASS_ID = B.CLASS_ID
				LEFT OUTER JOIN SEMESTER D ON A.SEMESTER_ID = D.SEMESTER_ID
                LEFT OUTER JOIN SCHOOL_FEE X ON A.SEMESTER_ID = X.SEMESTER_ID AND X.APPLY_YEAR = '${req.query.applyYear}' AND X.APPLY_MONTH = '${req.query.applyMonth}'
                WHERE A.USE_YN = 'Y' AND B.USE_YN = 'Y') A
        ) T
        ORDER BY TORD, ORD
    `;

    connection.query(sql,
        (err, rows, fields) => {
			if(err){
                Log.error(`/api/stats/monthly/schoolfee/sum/list failed. sql=${sql}, error=${err}`);
                res.send({"results": []});
			}else{             
                let results = [];
                for(let i=0; i < rows.length; i++){
                    results.push(rows[i]);
				}				
				Log.print(`/api/stats/monthly/schoolfee/sum/list called  sql=${sql}`);
                res.send({"results": results});
			}
        }
    );
}//monthlySchoolfeeSumList

module.exports = {
    monthlySchoolfeeSumList
}